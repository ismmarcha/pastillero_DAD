package es.us.lsi.dad;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.mqtt.MqttServer;

public class MQTTServerVerticle extends AbstractVerticle {

	private MqttServer mqttServer = null;

	@Override
	public void start(Promise<Void> startFuture) {
		mqttServer = MqttServer.create(vertx);
		mqttServer.endpointHandler(endpoint -> {

			// shows main connect info
			System.out.println("MQTT client [" + endpoint.clientIdentifier() + "] request to connect, clean session = "
					+ endpoint.isCleanSession());

			// accept connection from the remote client
			endpoint.accept(false);

		}).listen(4500, ar -> {
			if (ar.succeeded()) {
				System.out.println("MQTT server is listening on port " + ar.result().actualPort());
			} else {

				System.out.println("Error on starting the server");
				ar.cause().printStackTrace();
			}
		});
	}

	@Override
	public void stop(Promise<Void> startFuture) {
		mqttServer.close();
	}

}
